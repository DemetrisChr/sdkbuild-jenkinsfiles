// vim: ft=groovy et ts=4 sw=4 sts=4

def PLATFORMS = [ "centos7", "macos", "windows" ]

pipeline {
    agent none
    stages {
        stage('job valid?') {
            when {
                expression {
                    return _INTERNAL_OK_.toBoolean() != true
                }
            }
            steps {
                error("Exiting early as not valid run")
            }
        }
        stage('prepare and validate') {
            agent { label 'centos6||centos7||ubuntu16||ubuntu14' }
            environment {
                GOPATH = "${WORKSPACE}"
                GOROOT = "${GOPATH}" + "/deps/go${GO_VERSION}"
                PATH = "${WORKSPACE}" + "/bin:" + "${GOROOT}" + "/bin:" + "${PATH}"
            }
            steps {
                cleanWs()
                shWithEcho("cbdep install -d deps golang ${GO_VERSION}")
                dir('src/github.com/couchbase/gocb') {
                    checkout([$class: 'GitSCM', branches: [[name: '$SHA']], userRemoteConfigs: [[refspec: "$GERRIT_REFSPEC", url: '$REPO', poll: false]]])
                    shWithEcho("go version")
                    
                    script {
                        if (env.GOCB_VERSION == "v1") {
                            shWithEcho("go get -t ./")
                            shWithEcho("make devsetup && make lint")
                        } else {
                            withEnv(['GO111MODULE=on']) {
                                shWithEcho("go get ./")
                                // make sure that we've vendored and updated mod file correctly
                                shWithEcho("go mod vendor")
                                shWithEcho("go mod tidy")
                                shWithEcho("git diff --name-status --exit-code")

                                // make sure that we haven't left a replace in the mod file
                                shWithEcho("""
                                if grep -q "replace " go.mod; then
                                    echo "Found replace in go.mod file"
                                    exit 1
                                fi
                                """)

                                shWithEcho("make devsetup && make lint")
                            }
                        }
                    }
                    
                    
                    script {
                        if (env.IS_RELEASE.toBoolean() == true) {
                            echo "This is release, not updating metadata"
                        } else {
                            echo "This is not release, updating metadata"
                            def version = sh(script: 'grep goCbVersionStr constants.go | awk \'{print $3}\' | cut -d "\\"" -f 2 | tr -d "\\n"', returnStdout: true)
                            def buildNum = VersionNumber([projectStartDate: '', versionNumberString: '${BUILDS_ALL_TIME, XXXX}', versionPrefix: '', worstResultForIncrement: 'NOT_BUILT'])
                            version = version + "." + buildNum
                            println version
                            shWithEcho("sed -i 's/\\(goCbVersionStr = \\).*\$/\\1\"$version\"/' constants.go")
                        }
                    } 
                }
                
                stash includes: 'src/github.com/couchbase/gocb/', name: 'gocb', useDefaultExcludes: false
            }
        }
        stage('build') {
            agent { label 'master' }
            steps {
                cleanWs()
                builds(PLATFORMS)
            }
        }
        stage('test') {
            agent { label 'ubuntu14||ubuntu16||centos6||centos7' }
            environment {
                GOPATH = "${WORKSPACE}"
                GOROOT = "${GOPATH}" + "/deps/go${GO_VERSION}"
                PATH = "${WORKSPACE}" + "/bin:" + "${GOROOT}" + "/bin:" + "${PATH}"
            }
            steps {
                cleanWs()
                shWithEcho("cbdep install -d deps golang ${GO_VERSION}")
                unstash "gocb-build-"+ PLATFORMS[0]
                dir("src/github.com/couchbase/gocb") {
                    shWithEcho("go version")
                    script {
                        if (env.GOCB_VERSION == "v1") {
                            shWithEcho("go get -t ./")
                        } else {
                            withEnv(['GO111MODULE=on']) {
                                shWithEcho("go get ./")
                                shWithEcho("make devsetup")
                            }
                        }
                    shWithEcho("go test -race -coverprofile=$WORKSPACE/cover.out ./")
                }
            }
        }
        stage('package') {
            agent { label 'ubuntu14||ubuntu16||centos6||centos7' }
            when { 
                expression 
                    {  return IS_GERRIT_TRIGGER.toBoolean() == false } 
            }
            steps {
                cleanWs()
                unstash "gocb-build-"+ PLATFORMS[0]
                stash includes: 'src/github.com/couchbase/gocb/', name: "gocb-package", useDefaultExcludes: false
            }
            post {
                always {
                    archiveArtifacts artifacts: 'src/github.com/couchbase/gocb/', fingerprint: true
                }
            }
        }
        stage('test-integration') {
            agent { label 'master' }
            when {
                expression
                    {  return IS_GERRIT_TRIGGER.toBoolean() == false } 
            }
            steps {
                cleanWs()
                build job: "gocb-test-integration", parameters: [
                    string(name: "GO_VERSION", value: GO_VERSION),
                    string(name: "GOCB_VERSION", value: GOCB_VERSION),
                    string(name: "CB_SERVER_VERSION", value: "5.5.2")
                ]
                build job: "gocb-test-integration", parameters: [
                    string(name: "GO_VERSION", value: GO_VERSION),
                    string(name: "GOCB_VERSION", value: GOCB_VERSION),
                    string(name: "CB_SERVER_VERSION", value: "6.0.0")
                ]
                script {
                    if (env.GOCB_VERSION != "v1") {
                        build job: "gocb-test-integration", parameters: [
                            string(name: "GO_VERSION", value: GO_VERSION),
                            string(name: "GOCB_VERSION", value: GOCB_VERSION),
                            string(name: "CB_SERVER_VERSION", value: "6.5.0-3143"),
                            string(name: "EXTRA_PARAMS", value: "--collection-name=test")
                        ]
                    }
                }
            }
        }
        stage('quality') {
            agent { label 'master' }
            when {
                expression 
                    {  return IS_GERRIT_TRIGGER.toBoolean() == false } 
            }
            steps {
                cleanWs()
            }
        }
        stage('approval') {
            agent none
            when { 
                expression 
                    {  return IS_RELEASE.toBoolean() == true } 
            }
            steps {
                emailext body: "Jenkins: approval required for gocb -$BUILD_URL", subject: 'Jenkins: approval required for gocb', to: 'charles.dixon@couchbase.com'
                input 'Publish?'
            }
        }
        stage('publish') {
            agent { label 'ubuntu14||ubuntu16||centos6||centos7' }
            when { 
                expression 
                    {  return IS_RELEASE.toBoolean() == true } 
            }
            steps {
                cleanWs()
                unstash "gocb-package"
                
                dir("src/github.com/couchbase/gocb") {
                    script {
                        def version = sh(script: 'grep goCbVersionStr constants.go | awk \'{print $3}\' | cut -d "\\"" -f 2 | tr -d "\\n"', returnStdout: true)
                        println version
                        shWithEcho("""
                            git config user.name "Couchbase SDK Team"
                            git config user.email "sdk_dev@couchbase.com"
                            git config user.signingkey 7CD637BCC6326B4ED62959B8D21968C134100A58
                            git tag -asm "Release $version" $version
                            git push origin $version
                        """)
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'src/github.com/couchbase/gocb/', fingerprint: true
                }
            }
        }
    }
}

void shWithEcho(String command) {
    echo sh (script: command, returnStdout: true)
}

void batWithEcho(String command) {
    echo bat (script: command, returnStdout: true)
}

def builds(PLATFORMS) {
    def builds = [:]
    for (j in PLATFORMS) {
        def platform = j

        builds[platform]= {
            node(platform) {
                def envStr = []
                if (platform == "windows") {
                    envStr = ["GOPATH=${WORKSPACE}","GOROOT=${WORKSPACE}/deps/go${GO_VERSION}","PATH=$PATH;${WORKSPACE}/bin;${WORKSPACE}/deps/go${GO_VERSION}/bin"]
                } else {
                    envStr = ["GOPATH=${WORKSPACE}","GOROOT=${WORKSPACE}/deps/go${GO_VERSION}","PATH=$PATH:${WORKSPACE}/bin:${WORKSPACE}/deps/go${GO_VERSION}/bin"]
                }
                withEnv(envStr) {
                    stage("build ${platform}") {
                        cleanWs()
                        unstash 'gocb'
    
                        if (platform == "windows") {
                            batWithEcho("SET")
                            batWithEcho("cbdep install -d deps golang ${GO_VERSION}")
        
                            dir("src/github.com/couchbase/gocb") {
                                batWithEcho("go version")
                                if (env.GOCB_VERSION == "v1") {
                                    batWithEcho("go get -t ./")
                                } else {
                                    withEnv(['GO111MODULE=on']) {
                                        batWithEcho("go get ./")
                                    }
                                }
                                batWithEcho("go build")
                            }
                        } else {
                            shWithEcho("cbdep install -d deps golang ${GO_VERSION}")
        
                            dir("src/github.com/couchbase/gocb") {
                                shWithEcho("go version")
                                if (env.GOCB_VERSION == "v1") {
                                    shWithEcho("go get -t ./")
                                } else {
                                    withEnv(['GO111MODULE=on']) {
                                        shWithEcho("go get ./")
                                    }
                                }
                                shWithEcho("go build")
                            }
                        }
    
                        stash includes: 'src/github.com/couchbase/gocb/', name: "gocb-build-${platform}", useDefaultExcludes: false
                    }
                }
            }
        }
    }

    parallel builds
}