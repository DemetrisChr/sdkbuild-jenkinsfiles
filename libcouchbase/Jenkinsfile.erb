<% # vim: ft=eruby et ts=4 sw=4 sts=4
openssl_ver = '1.1.1g-sdk2'
windows_dists = [
    [2015, 14],
    [2017, 15],
]
centos_dists = [
    [7, 'x86_64', 64],
]

ubuntu_dists = [
    ['bionic', 'amd64', 'ubuntu1804', 64],
    # ['bionic', 'i386', 'ubuntu1804', 32],
    ['buster', 'amd64', 'debian10', 64],
    # ['buster', 'i386', 'debian10', 32],
]

nix_test_builds = [
    # SockMgrTest.testIdleClosed hangs on old Ubuntu and Debian with system libuv
    # ['ubuntu16', 'ubuntu', 16, 'x64'],
    # ['debian8', 'debian', 8, 'x64'],

    ['ubuntu20', 'ubuntu', 20, 'x64'],
    ['debian9', 'debian', 9, 'x64'],
    ['centos8', 'centos', 8, 'x64'],
    ['centos7', 'centos', 7, 'x64'],
    ['m1', 'macos', 11, 'm1'],
    ['macos-11.0', 'macos', 11, 'x64']
]

gtest_shuffle = false
integration_enabled = true
if ENV['WINDOWS_ONLY']
    windows_dists = [
        [2015, 14],
        [2017, 15],
        [2019, 16],
    ]
    centos_dists = ubuntu_dists = nix_test_builds = []
    integration_enabled = false
elsif ENV['LINUX_ONLY']
    windows_dists = []
    centos_dists = [
        [7, 'x86_64', 64],
        [8, 'x86_64', 64],
    ]
    ubuntu_dists = [
        ['focal', 'amd64', 'ubuntu2004', 64],
        ['bionic', 'amd64', 'ubuntu1804', 64],
        # ['bionic', 'i386', 'ubuntu1804', 32],
        ['xenial', 'amd64', 'ubuntu1604', 64],
        # ['xenial', 'i386', 'ubuntu1604', 32],

        ['stretch', 'amd64', 'debian9', 64],
        # ['stretch', 'i386', 'debian9', 32],
        ['buster', 'amd64', 'debian10', 64],
        # ['buster', 'i386', 'debian10', 32],
        ['bullseye', 'amd64', 'debian11', 64],
    ]
end

reltype = 'DEBUG'
reltype = 'RelWithDebInfo'

%>
// DO NOT EDIT: this file was generated from Jenkinsfile.erb
class Version {
    String gitVersion;

    int major;
    int minor;
    int patch;
    int commitCount;
    String prerelease;
    String commitSha1;

    Version(String gitVersion) {
        this.gitVersion = gitVersion.trim();
        parse()
    }

    @NonCPS
    void parse() {
        def res = (gitVersion =~ /^(\d+)\.(\d+)\.(\d+)(-(beta.\d+))?(-(\d+)-g([0-9a-f]+))?$/)
        res.find()
        this.major = res.group(1) as Integer
        this.minor = res.group(2) as Integer
        this.patch = res.group(3) as Integer
        if (res.group(5)) {
            this.prerelease = res.group(5)
        }
        if (res.group(7)) {
            this.commitCount = res.group(7) as Integer
        }
        if (res.group(8)) {
            this.commitSha1 = res.group(8)
        }
    }

    String version() {
        return "${major}.${minor}.${patch}"
    }

    String tar() {
        if (commitCount == null || commitCount == 0) {
            if (prerelease != null && prerelease != "") {
                return "${version()}_${prerelease}"
            } else {
                return version()
            }
        }
        return gitVersion.replace("-", "_")
    }

    String tarName() {
        return "libcouchbase-${tar()}"
    }

    String rpmVer() {
        return version()
    }

    String rpmRel() {
        def rel = "1"
        if (prerelease) {
            rel = "0.${prerelease}"
        } else if (commitCount) {
            rel = "${commitCount + 1}.git${commitSha1}"
        }
        return rel
    }

    String srpmGlob() {
        return "libcouchbase-${version()}-${rpmRel()}*.src.rpm"
    }

    String deb() {
        def ver = version()
        if (prerelease) {
            ver += "~${prerelease}"
        } else if (commitCount) {
            ver += "~r${commitCount}git${commitSha1}"
        }
        return ver
    }
}

def VERSION = new Version('0.0.0')
def CLUSTER = [:]

class DynamicCluster {
    String id_ = null;
    String ips_ = null;
    String version_ = null;

    DynamicCluster(String version) {
        this.version_ = version
    }

    String clusterId() {
        return id_
    }

    String connectionString() {
        return "couchbase://" + ips_.replaceAll(',', ';') + ",default,Administrator,password"
    }

    String firstIP() {
        return ips_.tokenize(",")[0]
    }

    String version() {
        return version_.tokenize("_")[0]
    }

    String extraOptions() {
        if (version_.tokenize("_").size() > 1) {
            return "--enable-developer-preview"
        }
        return ""
    }

    String inspect() {
        return "Cluster(id: \"${id_}\", IPs: \"${ips_}\", connstr: \"${connectionString()}\", version: \"${version_}\")"
    }
}

pipeline {
    agent none
    stages {
        stage('prepare and validate') {
            agent { label 'centos8 || centos7 || centos6' }
            steps {
                cleanWs()
                script {
                    if (IS_GERRIT_TRIGGER.toBoolean()) {
                        currentBuild.displayName = "cv-${BUILD_NUMBER}"
                    } else {
                        currentBuild.displayName = "full-${BUILD_NUMBER}"
                    }
                }

                dir('libcouchbase') {
                    checkout([$class: 'GitSCM', branches: [[name: '$SHA']], userRemoteConfigs: [[refspec: "$GERRIT_REFSPEC", url: '$REPO', poll: false]]])
                    script {
                        VERSION = new Version(sh(script: 'git describe --long --abbrev=10', returnStdout: true))
                        echo "Building ${VERSION.gitVersion}, gerrit: ${IS_GERRIT_TRIGGER.toBoolean()}, release: ${IS_RELEASE.toBoolean()}, skip_tests: ${SKIP_TESTS.toBoolean()}"
                    }
                }

                stash includes: 'libcouchbase/', name: 'libcouchbase', useDefaultExcludes: false

                dir('libcouchbase') {
                    dir('build') {
                        sh('cmake -DCMAKE_BUILD_TYPE=<%= reltype %> -DLCB_NO_PLUGINS=1 -DLCB_NO_TESTS=1 -DLCB_NO_MOCK=1 ..')
                        sh('cmake --build . --target dist')
                        archiveArtifacts(artifacts: "${VERSION.tarName()}.tar.gz", fingerprint: true)
                        stash includes: "${VERSION.tarName()}.tar.gz", name: 'tarball', useDefaultExcludes: false
<% if ENV['WINDOWS_ONLY'] %>
                        withAWS(credentials: 'aws-sdk', region: 'us-east-1') {
                            s3Upload(
                                bucket: 'sdk-snapshots.couchbase.com',
                                file: "${VERSION.tarName()}.tar.gz",
                                path: 'libcouchbase/'
                            )
                        }
<% end %>
                    }
                }
            }
        }

<% unless ENV['WINDOWS_ONLY'] %>
        stage('nix') {
            matrix {
                axes {
                    axis {
                        name 'PLATFORM'
                        values <%= nix_test_builds.map { |(label, dist, relno, arch)| label.inspect }.join(", ") %>
                    }
                }

                agent { label PLATFORM }
                stages {
                    stage("prep") {
                        steps {
                            dir("ws_${PLATFORM}") {
                                deleteDir()
                                unstash 'libcouchbase'
                            }
                        }
                    }
                    stage('build') {
                        environment {
                            CMAKE_BUILD_PARALLEL_LEVEL=8
                        }
                        steps {
                            dir("ws_${PLATFORM}") {
                                dir('build') {
                                    sh('cmake -DCMAKE_BUILD_TYPE=<%= reltype %> ../libcouchbase')
                                    sh("cmake --build . --target all ${VERBOSE.toBoolean() ? '--verbose' : ''}")
                                    sh("cmake --build . --target alltests ${VERBOSE.toBoolean() ? '--verbose' : ''}")
                                }
                            }
                            stash(includes: "ws_${PLATFORM}/", name: "${PLATFORM}_build")
                        }
                    }
                    stage('test') {
<% if integration_enabled %>
                        when {
                            expression {
                                return !SKIP_TESTS.toBoolean()
                            }
                        }
<% end %>
                        options {
                            timeout(time: 60, unit: 'MINUTES')
                        }
                        environment {
<% if gtest_shuffle %>
                            GTEST_SHUFFLE=1
<% end %>
                            CTEST_PARALLEL_LEVEL=1
                            CTEST_OUTPUT_ON_FAILURE=1
                        }
                        post {
                           always {
                               junit(testResults: "ws_${PLATFORM}/build/*.xml", allowEmptyResults: true)
                           }
                       }
                       steps {
                           dir("ws_${PLATFORM}/build") {
                               sh("ctest --label-exclude contaminating ${VERBOSE.toBoolean() ? '--extra-verbose' : ''}")
                               sh("ctest --label-exclude normal ${VERBOSE.toBoolean() ? '--extra-verbose' : ''}")
                           }
                       }
                    }
                }
            }
        }
<% end %>

<% unless ENV['LINUX_ONLY'] %>
        stage('win') {
            matrix {
                axes {
                    axis {
                        name 'MSVS'
                        values <%= (windows_dists.map { |(msvs_ver, msvcc_ver)| "#{msvcc_ver} #{msvs_ver}".inspect } +  
                                    windows_dists.reject { |(msvs_ver, msvcc_ver)| msvs_ver == 2019 }.map { |(msvs_ver, msvcc_ver)| "#{msvcc_ver} #{msvs_ver} Win64".inspect }).join(", ") %>
                    }
                    axis {
                        name 'TLS'
                        values true, false
                    }
                }

                agent { label "msvc-${MSVS.split(' ')[1]}" }
                stages {
                    stage('prep') {
                        steps {
                        dir("ws_win_${MSVS.replaceAll(' ', '_')}") {
                                deleteDir()
                                script {
                                    if (TLS.toBoolean()) {
                                        bat("cbdep --debug --platform windows_msvc2017 install ${MSVS.matches(/.*(Win64|2019).*/) ? '' : '--x32'} openssl <%= openssl_ver %>")
                                    }
                                }
                                unstash 'libcouchbase'
                            }
                        }
                    }
                    stage('build') {
                        steps {
                            dir("ws_win_${MSVS.replaceAll(' ', '_')}/build") {
                                bat("cmake -G\"Visual Studio ${MSVS}\" ${TLS.toBoolean() ? '-DOPENSSL_ROOT_DIR=..\\install\\openssl-<%= openssl_ver %>' : '-DLCB_NO_SSL=1'} ..\\libcouchbase")
                                bat('cmake --build .')
                            }
                        }
                    }
                    stage('test') {
                        when {
                            expression {
                                return !SKIP_TESTS.toBoolean()
                            }
                        }
                        options {
                            timeout(time: 60, unit: 'MINUTES')
                        }
                        environment {
<% if gtest_shuffle %>
                            GTEST_SHUFFLE=1
<% end %>
                            CTEST_PARALLEL_LEVEL=1
                            CTEST_OUTPUT_ON_FAILURE=1
                        }
                        post {
                            always {
                                junit(testResults: "ws_win_${MSVS.replaceAll(' ', '_')}/build/*.xml", allowEmptyResults: true)
                            }
                        }
                        steps {
                            dir("ws_win_${MSVS.replaceAll(' ', '_')}/build") {
                                bat('cmake --build . --target alltests')
                                script {
                                    if (TLS.toBoolean()) {
                                        bat('copy ..\\install\\openssl-<%= openssl_ver %>\\bin\\*.dll bin\\Debug\\')
                                    }
                                }
                                bat("ctest --label-exclude contaminating --build-config debug ${VERBOSE.toBoolean() ? '--extra-verbose' : ''}")
                                bat("ctest --label-exclude normal --build-config debug ${VERBOSE.toBoolean() ? '--extra-verbose' : ''}")
                            }
                        }
                    }
                    stage("pack") {
                        when {
                            expression {
                                return !IS_GERRIT_TRIGGER.toBoolean()
                            }
                        }
                        steps {
                            dir("ws_win_${MSVS.replaceAll(' ', '_')}/build") {
                                bat('cmake --build . --target package')
                                script {
                                    if (TLS.toBoolean()) {
                                        bat("move ${VERSION.tarName()}_vc${MSVS.split(' ')[0]}_${MSVS.matches(/.*(Win64|2019).*/) ? 'amd64' : 'x86'}.zip ${VERSION.tarName()}_vc${MSVS.split(' ')[0]}_${MSVS.matches(/.*(Win64|2019).*/) ? 'amd64' : 'x86'}_openssl.zip")
                                    }
                                }
                                archiveArtifacts(artifacts: "${VERSION.tarName()}_vc${MSVS.split(' ')[0]}_${MSVS.matches(/.*(Win64|2019).*/) ? 'amd64' : 'x86'}${TLS.toBoolean() ? '_openssl' : ''}.zip", fingerprint: true)
<% if ENV['WINDOWS_ONLY'] %>
                                withAWS(credentials: 'aws-sdk', region: 'us-east-1') {
                                    s3Upload(
                                        bucket: 'sdk-snapshots.couchbase.com',
                                        file: "${VERSION.tarName()}_vc${MSVS.split(' ')[0]}_${MSVS.matches(/.*(Win64|2019).*/) ? 'amd64' : 'x86'}${TLS.toBoolean() ? '_openssl' : ''}.zip",
                                        path: 'libcouchbase/'
                                    )
                                }
<% end %>
                            }
                        }
                    }
                }
            }
        }
<% end %>

<% if integration_enabled %>
        stage('int') {
            when {
                expression {
                    return !IS_GERRIT_TRIGGER.toBoolean()

                }
            }
            matrix {
                axes {
                    axis {
                        name 'CB_VERSION'
                        values '7.1-stable', '7.0.1', '6.6.3', '6.5.2', '6.0.5', '5.5.6'
                    }
                }
                agent { label 'sdkqe-centos7' }
                stages {
                    stage("env") {
                        steps {
                            sh("cbdyncluster ps -a")
                            script {
                                def cluster = new DynamicCluster(CB_VERSION)
                                cluster.id_ = sh(script: "cbdyncluster allocate --num-nodes=3 --server-version=${cluster.version()}", returnStdout: true).trim()
                                cluster.ips_ = sh(script: "cbdyncluster ips ${cluster.clusterId()}", returnStdout: true).trim()
                                CLUSTER[CB_VERSION] = cluster
                            }
                            echo("Allocated ${CLUSTER[CB_VERSION].inspect()}")
                            sh("cbdyncluster setup ${CLUSTER[CB_VERSION].clusterId()} --node=kv,index,n1ql --node=kv,fts --node=kv,cbas --bucket=default ${CLUSTER[CB_VERSION].extraOptions()}")
                            sh("curl --trace - --trace-time -sS -uAdministrator:password http://${CLUSTER[CB_VERSION].firstIP()}:8091/settings/indexes -d 'storageMode=plasma'")
                            sh("cbdyncluster add-sample-bucket ${CLUSTER[CB_VERSION].clusterId()} --name=beer-sample")
                            sh("curl --trace - --trace-time -sS -uAdministrator:password http://${CLUSTER[CB_VERSION].firstIP()}:8093/query/service -d'statement=CREATE PRIMARY INDEX ON default USING GSI' -d 'timeout=300s'")
                            sleep(20)
                            sh("curl --trace - --trace-time -sS -uAdministrator:password http://${CLUSTER[CB_VERSION].firstIP()}:8093/query/service -d'statement=SELECT * FROM system:indexes' -d 'timeout=300s'")
                        }
                    }
                    stage('test') {
<% if integration_enabled %>
                        when {
                            expression {
                                return !IS_GERRIT_TRIGGER.toBoolean() && !SKIP_TESTS.toBoolean()
                            }
                        }
<% end %>
                        post {
                            always {
                                sh("cbdyncluster rm ${CLUSTER[CB_VERSION].clusterId()}")
                            }
                        }
                        environment {
                            LCB_LOGLEVEL=5
                            LCB_TEST_CLUSTER_CONF="${CLUSTER[CB_VERSION].connectionString()}"
                            LCB_MAX_TEST_DURATION=1500
<% if gtest_shuffle %>
                            GTEST_SHUFFLE=1
<% end %>
                            CTEST_PARALLEL_LEVEL=1
                            CTEST_OUTPUT_ON_FAILURE=1
                        }
                        options {
                            timeout(time: 60, unit: 'MINUTES')
                        }
                        steps {
                            unstash('centos7_build')
                            dir('ws_centos7/build') {
                                sh("sed -i s:/home/couchbase/jenkins/workspace/lcb/lcb-scripted-build-pipeline/ws_centos7/build:\$(realpath .):g tests/CTestTestfile.cmake")
                                sleep(20)
                                sh("ctest --label-exclude contaminating --exclude-regexp BUILD ${VERBOSE.toBoolean() ? '--extra-verbose' : ''}")
                                sh("ctest --label-exclude normal --exclude-regexp BUILD ${VERBOSE.toBoolean() ? '--extra-verbose' : ''}")
                            }
                        }
                    }
                }
            }
        }
<% end %>
<% if (centos_dists + ubuntu_dists).any? %>
        stage('package') {
            when {
                expression {
                    return !IS_GERRIT_TRIGGER.toBoolean()
                }
            }
            parallel {
<% centos_dists.each do |(relno, arch, bits)| %>
                stage('centos<%= relno %> <%= arch %>') {
                    agent { label 'mock' }
                    stages {
                        stage('c<%= bits %>v<%= relno %>') {
                            steps {
                                dir('ws_centos<%= bits %>_v<%= relno %>') {
                                    sh("sudo chown couchbase:couchbase -R .")
                                    deleteDir()
                                    unstash 'libcouchbase'
                                }
                            }
                        }
                        stage('srpm') {
                            steps {
                                dir('ws_centos<%= bits %>_v<%= relno %>/build') {
                                    unstash 'tarball'
                                    sh("""
                                        sed 's/@VERSION@/${VERSION.rpmVer()}/g;s/@RELEASE@/${VERSION.rpmRel()}/g;s/@TARREDAS@/${VERSION.tarName()}/g' \
                                        < ../libcouchbase/packaging/rpm/libcouchbase.spec.in > libcouchbase.spec
                                    """.stripIndent())
                                    sh("""
                                        sudo mock --buildsrpm -r epel-<%= relno %>-<%= arch %> --spec libcouchbase.spec --sources ${pwd()} --old-chroot \
                                        --resultdir="libcouchbase-${VERSION.tar()}_centos<%= relno %>_srpm"
                                    """.stripIndent())
                                }
                            }
                        }
                        stage('rpm') {
                            steps {
                                dir('ws_centos<%= bits %>_v<%= relno %>/build') {
                                    sh("""
                                        sudo mock --rebuild -r epel-<%= relno %>-<%= arch %> --resultdir="libcouchbase-${VERSION.tar()}_centos<%= relno %>_<%= arch %>" --old-chroot \
                                        --verbose libcouchbase-${VERSION.tar()}_centos<%= relno %>_srpm/libcouchbase-${VERSION.version()}-${VERSION.rpmRel()}.el<%= relno %>.src.rpm
                                    """.stripIndent())
                                    sh("sudo chown couchbase:couchbase -R libcouchbase-${VERSION.tar()}_centos<%= relno %>_<%= arch %>")
                                    sh("rm -rf libcouchbase-${VERSION.tar()}_centos<%= relno %>_<%= arch %>/*.log")
                                    sh("tar cf libcouchbase-${VERSION.tar()}_centos<%= relno %>_<%= arch %>.tar libcouchbase-${VERSION.tar()}_centos<%= relno %>_<%= arch %>")
                                    archiveArtifacts(artifacts: "libcouchbase-${VERSION.tar()}_centos<%= relno %>_<%= arch %>.tar", fingerprint: true)
<% if relno == 7 && arch == 'x86_64' %>
                                    stash(includes: "libcouchbase-${VERSION.tar()}_centos<%= relno %>_<%= arch %>/*.src.rpm", name: 'centos7-srpm')
<% end %>
                                }
                            }
                        }
                    }
                }
<% end %>
<% ubuntu_dists.each do |(codename, arch, name, bits)| %>
                    stage('<%= name %> <%= arch %>') {
                        agent { label 'cowbuilder' }
                        stages {
                            stage('<%= name[0] %><%= bits %>v<%= name[/(\d{1,2})/, 1] %>') {
                                steps {
                                    dir('ws_<%= name %>_<%= arch %>') {
                                        sh("sudo chown couchbase:couchbase -R .")
                                        deleteDir()
                                        unstash 'libcouchbase'
                                    }
                                }
                            }
                            stage('cow1') {
                                when {
                                    expression {
                                        !fileExists("/var/cache/pbuilder/<%= codename %>-<%= arch %>.cow/etc/os-release")
                                    }
                                }
                                steps {
                                    sh("""
                                        sudo apt-get install cowbuilder && \
                                        sudo cowbuilder --create \
                                        --basepath /var/cache/pbuilder/<%= codename %>-<%= arch %>.cow \
                                        --distribution <%= codename %> \
                                        --debootstrapopts --arch=<%= arch %> \
                                        <% if name =~ /ubuntu/ %>--components 'main universe' --mirror http://ftp.ubuntu.com/ubuntu --debootstrapopts --keyring=/usr/share/keyrings/ubuntu-archive-keyring.gpg<% else %> --components 'main'<% end %>
                                    """.stripIndent())
                                }
                            }
                            stage('cow2') {
                                when {
                                    expression {
                                        fileExists("/var/cache/pbuilder/<%= codename %>-<%= arch %>.cow/etc/os-release")
                                    }
                                }
                                steps {
                                    sh('sudo cowbuilder --update --basepath /var/cache/pbuilder/<%= codename %>-<%= arch %>.cow')
                                }
                            }
                            stage('src') {
                                steps {
                                    dir('ws_<%= name %>_<%= arch %>/build') {
                                        unstash 'tarball'
                                        sh("ln -s ${VERSION.tarName()}.tar.gz libcouchbase_${VERSION.deb()}.orig.tar.gz")
                                        sh("tar -xf ${VERSION.tarName()}.tar.gz")
                                        sh("cp -a ../libcouchbase/packaging/deb ${VERSION.tarName()}/debian")
                                        dir(VERSION.tarName()) {
                                            sh("""
                                                dch --no-auto-nmu --package libcouchbase --newversion ${VERSION.deb()}-1 \
                                                --create "Release package for libcouchbase ${VERSION.deb()}-1"
                                            """.stripIndent())
                                            sh("dpkg-buildpackage -rfakeroot -d -S -sa")
                                        }
                                    }
                                }
                            }
                            stage('deb') {
                                steps {
                                    dir('ws_<%= name %>_<%= arch %>/build') {
                                        sh("""
                                           sudo cowbuilder --build \
                                           --basepath /var/cache/pbuilder/<%= codename %>-<%= arch %>.cow \
                                           --buildresult libcouchbase-${VERSION.deb()}_<%= name %>_<%= codename %>_<%= arch %> \
                                           --debbuildopts -j8 \
                                           --debbuildopts "-us -uc" \
                                           libcouchbase_${VERSION.deb()}-1.dsc
                                        """.stripIndent())
                                        sh("sudo chown couchbase:couchbase -R libcouchbase-${VERSION.deb()}_<%= name %>_<%= codename %>_<%= arch %>")
                                        sh("tar cf libcouchbase-${VERSION.tar()}_<%= name %>_<%= codename %>_<%= arch %>.tar libcouchbase-${VERSION.deb()}_<%= name %>_<%= codename %>_<%= arch %>")
                                        archiveArtifacts(artifacts: "libcouchbase-${VERSION.tar()}_<%= name %>_<%= codename %>_<%= arch %>.tar", fingerprint: true)
                                    }
                                }
                            }
                        }
                    }
<% end %>
            }
        }
<% if centos_dists.any? {|(relno, arch, bits)| relno == 8 && arch = 'x86_64' } %>
        stage('amzn2') {
            matrix {
                axes {
                    axis {
                        name 'PLATFORM'
                        values 'x86_64', 'aarch64'
                    }
                }
                agent { label PLATFORM == 'x86_64' ? 'amzn2' : 'qe-grav2-amzn2' }
                stages {
                    stage('rpm') {
                        steps {
                            sh('sudo yum install -y rpm-build yum-utils; cat /etc/os-release')
                            cleanWs()
                            unstash('centos7-srpm')
                            sh('sudo yum-builddep -y libcouchbase-*/*.src.rpm')
                            sh('rpmbuild --rebuild libcouchbase-*/*.src.rpm -D "_rpmdir output"')
                            dir('output') {
                                sh("mv ${PLATFORM} libcouchbase-${VERSION.tar()}_amzn2_${PLATFORM}")
                                sh("tar cf libcouchbase-${VERSION.tar()}_amzn2_${PLATFORM}.tar libcouchbase-${VERSION.tar()}_amzn2_${PLATFORM}")
                                archiveArtifacts(artifacts: "libcouchbase-${VERSION.tar()}_amzn2_${PLATFORM}.tar", fingerprint: true)
                            }
                        }
                    }
                }
            }
        }
<% end %>
<% if ENV['LINUX_ONLY'] %>
        stage('repositories') {
            when {
                expression {
                    return !IS_GERRIT_TRIGGER.toBoolean()
                }
            }
            agent none
            steps {
                build(job: 'lcb-repo-pipeline')
            }
        }
<% end %>
<% end %>
    }
}
