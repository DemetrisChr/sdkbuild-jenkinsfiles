// vim: ft=groovy et ts=4 sw=4 sts=4

def PLATFORMS = [ "cowbuilder", "mock", "windows" ]
def DEFAULT_PLATFORM = PLATFORMS[0]

class Version {
    String gitVersion;

    int major;
    int minor;
    int patch;
    int commitCount;
    String commitSha1;

    Version(String gitVersion) {
        this.gitVersion = gitVersion.trim();
        parse()
    }

    @NonCPS
    void parse() {
        def res = (gitVersion =~ /^(\d+)\.(\d+)\.(\d+)(-(\d+)-g([0-9a-f]+))?$/)
        res.find()
        this.major = res.group(1) as Integer
        this.minor = res.group(2) as Integer
        this.patch = res.group(3) as Integer
        if (res.group(5)) {
            this.commitCount = res.group(5) as Integer
        }
        this.commitSha1 = res.group(6)
    }

    String version() {
        return "${major}.${minor}.${patch}"
    }

    String tar() {
        if (commitCount == null || commitCount == 0) {
            return version()
        }
        return gitVersion.replace("-", "_")
    }

    String tarName() {
        return "libcouchbase-${tar()}"
    }

    String rpmVer() {
        return version()
    }

    String rpmRel() {
        def rel = "1"
        if (commitCount) {
            rel = "${commitCount + 1}.git${commitSha1}"

        }
        return rel
    }

    String srpmGlob() {
        return "libcouchbase-${version()}-${rpmRel()}*.src.rpm"
    }

    String[] rpm() {
        return [version(), rpmRel()]
    }

    String deb() {
        def ver = version()
        if (commitCount) {
            ver += "+r${commitCount}git${commitSha1}"
        }
        return ver
    }
}

String shWithEcho(String command) {
    def output = sh(script: command, returnStdout: true)
    echo output
    return output
}

String batWithEcho(String command) {
    def output = bat(script: command, returnStdout: true)
    echo output
    return output
}

def VERSION = new Version("0.0.0");

pipeline {
    agent none
    stages {
        stage('job valid?') {
            when {
                expression {
                    return _INTERNAL_OK_.toBoolean() != true
                }
            }
            steps {
                error("Exiting early as not valid run")
            }
        }
        stage('prepare and validate') {
            agent { label "centos7||centos6" }
            steps {
                cleanWs()
                shWithEcho("env")

                dir("libcouchbase") {
                    checkout([$class: 'GitSCM', branches: [[name: '$SHA']], userRemoteConfigs: [[refspec: "$GERRIT_REFSPEC", url: '$REPO', poll: false]]])
                    script {
                        if (env.IS_RELEASE == true) {
                            echo "This is release, not updating metadata"
                        } else {
                            echo "This is not release, updating metadata"
                        }
                        VERSION = new Version(shWithEcho('git describe --long'))
                    }
                }

                stash includes: 'libcouchbase/', name: 'libcouchbase', useDefaultExcludes: false
            }
        }
        stage('build-and-test') {
            agent { label 'master' }
            steps {
                cleanWs()
                dir("lcbpackage") {
                    checkout([$class: 'GitSCM', branches: [[name: 'master']], userRemoteConfigs: [[ url: 'http://github.com/couchbaselabs/lcbpackage.git', poll: false ]]])
                }

                stash includes: 'lcbpackage/', name: 'lcbpackage'
                buildsAndTests(PLATFORMS, VERSION)
            }
        }
    }
}

def buildsAndTests(PLATFORMS, VERSION) {
    def pairs = [:]
    for (j in PLATFORMS) {
        def platform = j

        if (platform == "windows") {
            // for (k in ["x86", "amd64"]) {
            for (k in ["amd64"]) {
                def ARCH = k
                // for (l in [9, 10, 11, 14]) {
                for (l in [14]) {
                    def MSVCC_VER = l

                    pairs[platform + "-" + ARCH + "-" + MSVCC_VER]= {
                        node(platform) {
                            def envStr = ["MSVCC_VER=${MSVCC_VER}", "ARCH=${ARCH}"]
                            withEnv(envStr) {
                                unstash 'libcouchbase'
                                batWithEcho('''
                                    echo PATH=%PATH%
                                    echo MSVCC_VER=%MSVCC_VER%
                                    echo ARCH=%ARCH%

                                    IF %MSVCC_VER% EQU 9 SET cmgen=Visual Studio 9 2008
                                    IF %MSVCC_VER% EQU 10 SET cmgen=Visual Studio 10 2010
                                    IF %MSVCC_VER% EQU 11 SET cmgen=Visual Studio 11 2012
                                    IF %MSVCC_VER% EQU 14 SET cmgen=Visual Studio 14 2015
                                    IF %ARCH% EQU amd64 SET cmgen=%cmgen% Win64

                                    RD /s /q BUILD
                                    MKDIR BUILD
                                    CD BUILD

                                    cmake -G"%cmgen%" -DLCB_NO_SSL=1 ..\\libcouchbase

                                    cmake --build .
                                    cmake --build . --target package
                                    rem cmake --build . --target alltests
                                    rem ctest -C debug
                                    '''
                                )
                            }
                        }
                    }
                }
            }
        } else {
            pairs[platform]= {
                node(platform) {
                    def envStr = []
                    withEnv(envStr) {
                        stage("build ${platform}") {
                            cleanWs()
                            unstash 'libcouchbase'
                            unstash 'lcbpackage'

                            shWithEcho("groups")
                            shWithEcho("groups `whoami`")

                            dir("libcouchbase") {
                                dir("build") {
                                    shWithEcho("cmake -DLCB_NO_PLUGINS=1 -DLCB_NO_TESTS=1 ..")
                                    shWithEcho("make dist")
                                    archiveArtifacts(artifacts: "${VERSION.tarName()}.tar.gz", fingerprint: true)
                                }
                            }
                            println platform
                            if (platform == "mock") {
                                dir("libcouchbase") {
                                    dir("build") {
                                        shWithEcho("""
                                        sed 's/@VERSION@/${VERSION.rpmVer()}/g;s/@RELEASE@/${VERSION.rpmRel()}/g;s/@TARREDAS@/${VERSION.tarName()}/g' \
                                             < ../packaging/rpm/libcouchbase.spec.in > libcouchbase.spec
                                        """)
                                        shWithEcho("""
                                        rpmbuild -bs --nodeps \
                                                 --define "_source_filedigest_algorithm md5" \
                                                 --define "_binary_filedigest_algorithm md5" \
                                                 --define "_topdir ${pwd()}" \
                                                 --define "_sourcedir ${pwd()}" \
                                                 --define "_srcrpmdir ${pwd()}" libcouchbase.spec
                                        """)

                                        def srpmPath = findFiles(glob: VERSION.srpmGlob())[0].path
                                        def dists = [
                                            [7, 'x86_64'],
                                            [6, 'i386'],
                                            [6, 'x86_64'],
                                        ]
                                        for (d in dists) {
                                            def (relno, arch) = d
                                            stage("centos${relno}_${arch}") {
                                                def resPath = "libcouchbase-${VERSION.tar()}_centos${relno}_${arch}"
                                                shWithEcho("""sudo mock -r epel-${relno}-${arch} --rebuild --resultdir="${resPath}" ${srpmPath} --verbose""")
                                                for (log in ['state.log', 'build.log', 'root.log']) {
                                                    if (fileExists("${resPath}/${log}")) {
                                                        shWithEcho("rm ${resPath}/${log}")
                                                        // maybe archive as artifact or dump to log on error?
                                                    }
                                                }
                                                shWithEcho("tar cvf ${resPath}.tar ${resPath}")
                                                archiveArtifacts(artifacts: "${resPath}.tar", fingerprint: true)
                                            }
                                        }
                                    }
//                                      # ../lcbpackage/rpm/mk-localrepo.sh
                                }
                            } else if (platform == "cowbuilder") {
                                //dir("distro") {
                                //    shWithEcho("ls /usr/share/keyrings/ubuntu-archive-keyring.gpg")
                                //    shWithEcho('''
                                //        #!/bin/bash -xe
                                //        cat > extra.sh <<EOF
                                //        set -e
                                //        set -x
                                //        apt-get install -y libevent-dev libev-dev libssl-dev unzip curl wget debhelper
                                //        (cd /opt; curl -kL https://cmake.org/files/v3.9/cmake-3.9.1-Linux-x86_64.tar.gz | tar zx)
                                //        ln -sf /opt/cmake-3.9.1-Linux-x86_64/bin/cmake /usr/local/bin/cmake
                                //        EOF
                                //    ''')
                                //    shWithEcho('''
                                //        #!/bin/bash -xe
                                //        mkdir cows
                                //        sudo cowbuilder --debug --create --distribution bionic --components 'main universe' --basepath cows/bionic-i386.cow --mirror http://ftp.ubuntu.com/ubuntu --debootstrapopts --arch=i386 # --debootstrapopts --keyring=/usr/share/keyrings/ubuntu-archive-keyring.gpg
                                //        sudo cowbuilder --debug --execute --save --basepath cows/bionic-i386.cow -- extra.sh
                                //    ''')
                                //}
                            } else {
                                error("Platform not recognised for ${platform}")
                            }

                            stash includes: 'libcouchbase/', name: "libcouchbase-build-${platform}", useDefaultExcludes: false
                        }
                       // stage("test ${platform}") {
                            //cleanWs()
                            //unstash("libcouchbase-build-${platform}")

                            //if (platform == "windows") {
                           // } else {
                            //}
                      //  }
                    }
                }
            }
        }
    }

    parallel pairs
}
