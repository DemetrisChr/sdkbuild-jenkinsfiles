def PLATFORMS = [
    "windows-2012",
    "ubuntu16",
    "centos7"
]
def DOTNET_SDK_VERSION = "2.1.403"
def CB_VERSIONS = ["5.5.2", "6.0.0"]
def SUFFIX = "r${BUILD_NUMBER}"

pipeline {
    agent none
    stages {
        stage("job valid?") {
            when {
                expression {
                    return _INTERNAL_OK_.toBoolean() != true
                }
            }
            steps {
                error("Exiting early as not valid run")
            }
        }
        stage("prepare and validate") {
            agent { label "centos6||centos7||ubuntu16||ubuntu14" }
            steps {
                cleanWs()
                dir("couchbase-net-client") {
                    checkout([$class: "GitSCM", branches: [[name: "$SHA"]], userRemoteConfigs: [[refspec: "$GERRIT_REFSPEC", url: "$REPO", poll: false]]])
                }

                // TODO: UPDATE METADATA HERE (SEE GOCB OR COUCHNODE FOR EXAMPLES)
                // TODO: PUT ANY LINTING/CODE QUALITY TOOLS HERE TOO

                stash includes: "couchbase-net-client/", name: "couchbase-net-client", useDefaultExcludes: false
            }
        }
        stage("build") {
            agent { label "master" }
            steps {
                doBuilds(PLATFORMS, DOTNET_SDK_VERSION)
            }
        }
        stage("unit-test") {
            agent { label "master" }
            steps {
                doUnitTests(PLATFORMS, DOTNET_SDK_VERSION)
            }
        }
        // stage("mock-test") {
        //     agent { label "master" }
        //     steps {
        //         doMockTests(PLATFORMS, DOTNET_SDK_VERSION)
        //     }
        // }
        // stage("combintation-test") {
        //     agent { label "master" }
        //     steps {
        //         doCombintationTests(PLATFORMS, DOTNET_SDK_VERSION)
        //     }
        // }
        stage("package") {
            agent { label "windows-2012" }
            when {
                expression {
                    return IS_GERRIT_TRIGGER.toBoolean() == false
                }
            }
            steps {
                unstash "couchbase-net-client-windows-2012"
                dir("couchbase-net-client") {
                    batWithEcho("..\\deps\\dotnet-core-sdk-${DOTNET_SDK_VERSION}\\dotnet pack Src\\Couchbase\\Couchbase.csproj -c Release /p:VersionSuffix=${SUFFIX} --no-build")
                    archiveArtifacts artifacts: "**\\*.nupkg", fingerprint: true
                }
            }
        }
        // stage("approval") {
        //     agent none
        //     when {
        //         expression {
        //             return IS_RELEASE.toBoolean() == true
        //         }
        //     }
        //     steps {
        //         input "Publish?"
        //     }
        // }
        // stage("publish") {
        //     agent { label "ubuntu14||ubuntu16||centos6||centos7" }
        //     when {
        //         expression {
        //             return IS_RELEASE.toBoolean() == true
        //         }
        //     }
        //     steps {
        //         cleanWs()
        //         unstash "couchbase-net-client-package"
        //         // TODO: PUBLISH!
        //     }
        //     post {
        //         always {
        //             archiveArtifacts artifacts: "couchbase-net-client/", fingerprint: true
        //         }
        //     }
        // }
    }
}

void shWithEcho(String command) {
    echo "[$STAGE_NAME]"+ sh (script: command, returnStdout: true)
}

void batWithEcho(String command) {
    echo "[$STAGE_NAME]"+ bat (script: command, returnStdout: true)
}

def doBuilds(PLATFORMS, DOTNET_SDK_VERSION) {
    def pairs = [:]
    for (j in PLATFORMS) {
        def platform = j

        pairs[platform] = {
            node(platform) {
                stage("build ${platform}") {
                    if (platform.contains("windows")) {
                        unstash "couchbase-net-client"
                        batWithEcho("cbdep install -d deps dotnet-core-sdk ${DOTNET_SDK_VERSION}")
                        dir("couchbase-net-client") {
                            // TODO: set version suffix and build with SNK
                            batWithEcho("..\\deps\\dotnet-core-sdk-${DOTNET_SDK_VERSION}\\dotnet build Src\\couchbase-net-client.sln")
                        }
                    } else {
                        cleanWs()
                        unstash "couchbase-net-client"
                        shWithEcho("cbdep install -d deps dotnet-core-sdk ${DOTNET_SDK_VERSION}")
                        dir("couchbase-net-client") {
                            // TODO: set version suffix and build with SNK
                            shWithEcho("../deps/dotnet-core-sdk-${DOTNET_SDK_VERSION}/dotnet build Src/couchbase-net-client.sln")
                        }
                    }

                    stash includes: "couchbase-net-client/", name: "couchbase-net-client-${platform}", useDefaultExcludes: false
                }
            }
        }
    }

    parallel pairs
}

def doUnitTests(PLATFORMS, DOTNET_SDK_VERSION) {
    def pairs = [:]
    for (j in PLATFORMS) {
        def platform = j

        pairs[platform] = {
            node(platform) {
                stage("unit-test ${platform}") {
                    if (platform.contains("windows")) {
                        unstash "couchbase-net-client-${platform}"
                        batWithEcho("cbdep install -d deps dotnet-core-sdk ${DOTNET_SDK_VERSION}")
                        dir("couchbase-net-client") {
                            batWithEcho("..\\deps\\dotnet-core-sdk-${DOTNET_SDK_VERSION}\\dotnet test Src\\Couchbase.UnitTests\\Couchbase.UnitTests.csproj -f net452 --no-build")
                            batWithEcho("..\\deps\\dotnet-core-sdk-${DOTNET_SDK_VERSION}\\dotnet test Src\\Couchbase.UnitTests\\Couchbase.UnitTests.csproj -f netcoreapp2.0 --no-build")
                            //batWithEcho("..\\deps\\dotnet-core-sdk-${DOTNET_SDK_VERSION}\\dotnet test Src\\Couchbase.UnitTests\\Couchbase.UnitTests.csproj -f netcoreapp1.1 --no-build")
                        }
                    } else {
                        cleanWs()
                        unstash "couchbase-net-client-${platform}"
                        shWithEcho("cbdep install -d deps dotnet-core-sdk ${DOTNET_SDK_VERSION}")
                        dir("couchbase-net-client") {
                            shWithEcho("../deps/dotnet-core-sdk-${DOTNET_SDK_VERSION}/dotnet test Src/Couchbase.UnitTests/Couchbase.UnitTests.csproj -f netcoreapp2.0 --no-build")
                            //shWithEcho("../deps/dotnet-core-sdk-${DOTNET_SDK_VERSION}/dotnet test Src/Couchbase.UnitTests/Couchbase.UnitTests.csproj -f netcoreapp1.1 --no-build")
                        }
                    }

                    // converts test results into JUnit format, requires MSTest Jenkins plugin
                    // step([$class: "MSTestPublisher", testResultsFile:"**/unit_tests.xml", failOnError: true, keepLongStdio: true])

                    // TODO: IF YOU HAVE INTEGRATION TESTS THAT RUN AGAINST THE MOCK DO THAT HERE
                    // USING THE PACKAGE(S) CREATED ABOVE
                }
            }
        }
    }

    parallel pairs
}

// def doMockTests(PLATFORMS, DOTNET_SDK_VERSION) {
//     def pairs = [:]
//     for (j in PLATFORMS) {
//         def platform = j

//         pairs[platform] = {
//             node(platform) {
//                 stage("mock-test ${platform}") {

//                 }
//             }
//         }
//     }

//     parallel pairs
// }

// def doCombintationTests(PLATFORMS, DOTNET_SDK_VERSION) {
//     def pairs = [:]
//     for (j in PLATFORMS) {
//         def platform = j

//         pairs[platform] = {
//             node(platform) {
//                 stage("combintation-test ${platform}") {

//                 }
//             }
//         }
//     }

//     parallel pairs
// }
