def PLATFORMS = [
    "windows-2012",
    "ubuntu16",
    "centos7",
    "macos"
]
def DOTNET_SDK_VERSION = "2.1.403"

pipeline {
    agent none
    stages {
        stage('job valid?') {
            when {
                expression {
                    return _INTERNAL_OK_.toBoolean() != true
                }
            }
            steps {
                error("Exiting early as not valid run")
            }
        }
        stage('prepare and validate') {
            agent { label 'centos6||centos7||ubuntu16||ubuntu14' }
            steps {
                cleanWs()
                dir('couchbase-net-client') {
                    checkout([$class: 'GitSCM', branches: [[name: '$SHA']], userRemoteConfigs: [[refspec: "$GERRIT_REFSPEC", url: '$REPO', poll: false]]])
                }

                // TODO: UPDATE METADATA HERE (SEE GOCB OR COUCHNODE FOR EXAMPLES)
                // TODO: PUT ANY LINTING/CODE QUALITY TOOLS HERE TOO

                stash includes: 'couchbase-net-client/', name: 'couchbase-net-client', useDefaultExcludes: false
            }
        }
        stage('build-test') {
            agent { label 'master' }
            steps {
                buildAndTest(PLATFORMS, DOTNET_SDK_VERSION)
            }
        }
        // stage('package') {
        //     agent { label 'windows-2012' }
        //     when {
        //         expression
        //             {  return IS_GERRIT_TRIGGER.toBoolean() == false }
        //     }
        //     steps {
        //         cleanWs()
        //         unstash "couchbase-net-client"
        //         dir("couchbase-net-client") {
        //             batWithEcho("..\\deps\\dotnet-core-sdk-${DOTNET_SDK_VERSION}\\dotnet pack Src\\Couchbase\\Couchbase.csproj -c Release --no-build")
        //             archiveArtifacts artifacts: "**\\*.nupkg", fingerprint: true
        //         }
        //     }
        //     post {
        //         always {
        //             archiveArtifacts artifacts: 'couchbase-net-client/', fingerprint: true
        //         }
        //     }
        // }
        // stage('quality') {
        //     agent { label 'master' }
        //     when {
        //         expression
        //             {  return IS_GERRIT_TRIGGER.toBoolean() == false }
        //     }
        //     steps {
        //         cleanWs()
        //     }
        // }
        // stage('snapshot') {
        //     agent { label 'ubuntu14||ubuntu16||centos6||centos7' }
        //     when {
        //         expression
        //             {  return IS_RELEASE.toBoolean() == false && IS_GERRIT_TRIGGER.toBoolean() == false }
        //     }
        //     steps {
        //         cleanWs()
        //         // TODO: Upload build artefacts to snapshot server here
        //     }
        // }
        // stage('approval') {
        //     agent none
        //     when {
        //         expression
        //             {  return IS_RELEASE.toBoolean() == true }
        //     }
        //     steps {
        //         input 'Publish?'
        //     }
        // }
        // stage('publish') {
        //     agent { label 'ubuntu14||ubuntu16||centos6||centos7' }
        //     when {
        //         expression
        //             {  return IS_RELEASE.toBoolean() == true }
        //     }
        //     steps {
        //         cleanWs()
        //         unstash "couchbase-net-client-package"
        //         // TODO: PUBLISH!
        //     }
        //     post {
        //         always {
        //             archiveArtifacts artifacts: 'couchbase-net-client/', fingerprint: true
        //         }
        //     }
        // }
    }
}

void shWithEcho(String command) {
    echo "[$STAGE_NAME]"+ sh (script: command, returnStdout: true)
}

void batWithEcho(String command) {
    echo "[$STAGE_NAME]"+ bat (script: command, returnStdout: true)
}

def buildAndTest(PLATFORMS, DOTNET_SDK_VERSION) {
    def pairs = [:]
    for (j in PLATFORMS) {
        def platform = j

        pairs[platform]= {
            node(platform) {
                stage("build ${platform}") {
                    cleanWs()
                    unstash 'couchbase-net-client'

                    if (platform.contains("windows")) {
                        batWithEcho('SET')
                        batWithEcho("cbdep install -d deps dotnet-core-sdk ${DOTNET_SDK_VERSION}")

                        dir("couchbase-net-client") {
                            // TODO: set version suffix and build with SNK
                            batWithEcho("..\\deps\\dotnet-core-sdk-${DOTNET_SDK_VERSION}\\dotnet build Src\\couchbase-net-client.sln")
                        }

                        // stash on Windows to get all target frameworks
                        stash includes: 'couchbase-net-client/', name: 'couchbase-net-client', useDefaultExcludes: false
                    } else {
                        shWithEcho('env')
                        shWithEcho("cbdep install -d deps dotnet-core-sdk ${DOTNET_SDK_VERSION}")

                        dir("couchbase-net-client") {
                            // TODO: set version suffix and build with SNK
                            shWithEcho("../deps/dotnet-core-sdk-${DOTNET_SDK_VERSION}/dotnet build Src/couchbase-net-client.sln")
                        }
                    }
                }
                stage("test ${platform}") {
                    if (platform.contains("windows")) {
                        dir("couchbase-net-client") {
                            batWithEcho("..\\deps\\dotnet-core-sdk-${DOTNET_SDK_VERSION}\\dotnet test Src\\Couchbase.UnitTests\\Couchbase.UnitTests.csproj -f net452 --no-build")
                            batWithEcho("..\\deps\\dotnet-core-sdk-${DOTNET_SDK_VERSION}\\dotnet test Src\\Couchbase.UnitTests\\Couchbase.UnitTests.csproj -f netcoreapp2.0 --no-build")
                            //batWithEcho("..\\deps\\dotnet-core-sdk-${DOTNET_SDK_VERSION}\\dotnet test Src\\Couchbase.UnitTests\\Couchbase.UnitTests.csproj -f netcoreapp1.1 --no-build")
                        }
                    } else {
                        dir("couchbase-net-client") {
                            shWithEcho("../deps/dotnet-core-sdk-${DOTNET_SDK_VERSION}/dotnet test Src/Couchbase.UnitTests/Couchbase.UnitTests.csproj -f netcoreapp2.0 --no-build")
                            //shWithEcho("../deps/dotnet-core-sdk-${DOTNET_SDK_VERSION}/dotnet test Src/Couchbase.UnitTests/Couchbase.UnitTests.csproj -f netcoreapp1.1 --no-build")
                        }
                    }

                    // converts test results into JUnit format, requires MSTest Jenkins plugin
                    // step([$class: 'MSTestPublisher', testResultsFile:"**/unit_tests.xml", failOnError: true, keepLongStdio: true])

                    // TODO: IF YOU HAVE INTEGRATION TESTS THAT RUN AGAINST THE MOCK DO THAT HERE
                    // USING THE PACKAGE(S) CREATED ABOVE
                }
            }
        }
    }

    parallel pairs
}
