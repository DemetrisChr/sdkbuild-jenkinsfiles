def PLATFORMS = [ "ubuntu16", "windows" ]
def DEFAULT_PLATFORM = PLATFORMS[0]

pipeline {
    agent none
    stages {
        stage('job valid?') {
            when {
                expression {
                    return _INTERNAL_OK_.toBoolean() != true
                }
            }
            steps {
                error("Exiting early as not valid run")
            }
        }
        stage('prepare and validate') {
            agent { label 'centos6||centos7||ubuntu16||ubuntu14' }
            steps {
                cleanWs()
                dir('couchbase-jvm-core') {
                    checkout([$class: 'GitSCM', branches: [[name: '$SHA']], userRemoteConfigs: [[refspec: "$GERRIT_REFSPEC", url: '$REPO', poll: false]]])


                    // TODO: METADATA UPDATES GO HERE, MAYBE COPY OVER FROM JAVA-CLIENT?
                    script {
                        if (env.IS_RELEASE.toBoolean() == true) {
                            echo "This is release, not updating metadata"
                        } else {
                            echo "This is not release, updating metadata"
                        }
                    }
                }

                // TODO: ANY CODE QUALITY TOOLING GOES HERE e.g LINTING

                stash includes: 'couchbase-jvm-core/', name: 'couchbase-jvm-core', useDefaultExcludes: false
            }
        }
        stage('build and test') {
            agent { label 'master' }
            steps {
                cleanWs()
                buildsAndTests(PLATFORMS)
            }
        }
        stage('package') {
            agent { label 'ubuntu14||ubuntu16||centos6||centos7' }
            when {
                expression
                    {  return IS_GERRIT_TRIGGER.toBoolean() == false }
            }
            steps {
                cleanWs()
                unstash "couchbase-jvm-core-build-${DEFAULT_PLATFORM}"
                // Unsure if anything needs to happen here, build is only done on 1 host so nothing to collect
                // and docs are generated by build too.
                stash includes: 'couchbase-jvm-core/', name: 'couchbase-jvm-core-package', useDefaultExcludes: false
            }
            post {
                always {
                    archiveArtifacts artifacts: 'couchbase-jvm-core/', fingerprint: true
                }
            }
        }
        stage('test-integration-server') {
            agent { label 'master' }
            when {
                expression
                    {  return IS_GERRIT_TRIGGER.toBoolean() == false }
            }
            steps {
                cleanWs()
                //build job: "couchbase-java-client-test-integration", parameters: [
               // ]
            }
        }
        stage('quality') {
            agent { label 'master' }
            when {
                expression
                    {  return IS_GERRIT_TRIGGER.toBoolean() == false }
            }
            steps {
                cleanWs()
                // TODO: SITUATIONAL TESTING JOB WILL BE HOOKED HERE
            }
        }
        stage('snapshot') {
            agent { label 'ubuntu14||ubuntu16||centos6||centos7' }
            when {
                expression
                    {  return IS_GERRIT_TRIGGER.toBoolean() == false && IS_RELEASE.toBoolean() == false }
            }
            steps {
                cleanWs()
                // TODO: upload relevant artifacts to sdk snapshots
            }
        }
        stage('approval') {
            agent none
            when {
                expression
                    {  return IS_RELEASE.toBoolean() == true }
            }
            steps {
                input 'Publish?'
            }
        }
        stage('publish') {
            agent { label 'ubuntu14||ubuntu16||centos6||centos7' }
            when {
                expression
                    {  return IS_RELEASE.toBoolean() == true }
            }
            steps {
                cleanWs()
                unstash "couchbase-jvm-core-package"
                // TODO: upload relevant artifacts to maven
                // tag and push tag
            }
            post {
                always {
                    archiveArtifacts artifacts: 'couchbase-jvm-core/', fingerprint: true
                }
            }
        }
    }
}

void shWithEcho(String command) {
    echo sh (script: command, returnStdout: true)
}

void batWithEcho(String command) {
    echo bat (script: command, returnStdout: true)
}

def buildsAndTests(PLATFORMS) {
    def tests = [:]
    for (j in PLATFORMS) {
        def platform = j

        tests[platform]= {
            node(platform) {
                def envStr = []
                if (platform == "windows") {
                    envStr = ["JAVA_HOME=${WORKSPACE}\\deps\\jdk${JDK_VERSION}", "PATH=${WORKSPACE}\\deps\\jdk${JDK_VERSION}\\bin:$PATH"]
                } else {
                    envStr = ["JAVA_HOME=${WORKSPACE}/deps/jdk${JDK_VERSION}", "PATH=${WORKSPACE}/deps/jdk${JDK_VERSION}/bin:$PATH"]
                }
                withEnv(envStr) {
                    stage("build-${platform}") {
                        cleanWs()
                        unstash 'couchbase-jvm-core'

                        if (platform == "windows") {
                            batWithEcho("cbdep install -d deps java ${JAVA_VERSION}")
                            dir('couchbase-jvm-core') {
                                batWithEcho("mvn -version")
                                batWithEcho("java -version")
                                batWithEcho("mvn package -Dmaven.test.skip")
                            }
                        } else {
                            shWithEcho("cbdep install -d deps java ${JAVA_VERSION}")
                            dir('couchbase-jvm-core') {
                                shWithEcho("mvn -version")
                                shWithEcho("java -version")
                                shWithEcho("mvn package -Dmaven.test.skip")
                            }
                        }
                        stash includes: 'couchbase-jvm-core/', name: "couchbase-jvm-core-build-${platform}", useDefaultExcludes: false
                    }
                    stage("test-${platform}") {
                        if (platform == "windows") {
                             dir('couchbase-jvm-core') {
                                batWithEcho("mvn test -DuseMock=true -Dci=true")
                             }
                        } else {
                            dir('couchbase-jvm-core') {
                                shWithEcho("mvn test -DuseMock=true -Dci=true")
                            }
                        }
                        // TODO: IF YOU HAVE INTEGRATION TESTS THAT RUN AGAINST THE MOCK DO THAT HERE
                        // USING THE PACKAGE(S) CREATED ABOVE
                    }
                }
            }
        }
    }

    parallel tests
}
